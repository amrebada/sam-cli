let arg,inquirer;_47b‍.x([["cli",()=>cli]]);_47b‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_47b‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);


function parseArgumentsIntoOptions(rawArgs) {
    const args = arg(
        {
          '--git': Boolean,
          '--yes': Boolean,
          '--install': Boolean,
          '--generate': String,
          '-g': '--git',
          '-y': '--yes',
          '-i': '--install',
        },
        {
          argv: rawArgs.slice(2),
        }
      );
      return {
        skipPrompts: args['--yes'] || false,
        git: args['--git'] || false,
        generate: args['--generate'],
        template: args._[0],
        runInstall: args['--install'] || false,
      };
}
/*
async function promptForMissingOptions(options) {
 const defaultTemplate = 'JavaScript';
 if (options.skipPrompts) {
   return {
     ...options,
     template: options.template || defaultTemplate,
   };
 }

 const questions = [];
 if (!options.template) {
   questions.push({
     type: 'list',
     name: 'template',
     message: 'Please choose which project template to use',
     choices: ['JavaScript', 'TypeScript'],
     default: defaultTemplate,
   });
 }

 if (!options.git) {
   questions.push({
     type: 'confirm',
     name: 'git',
     message: 'Initialize a git repository?',
     default: false,
   });
 }

 const answers = await inquirer.prompt(questions);
 return {
   ...options,
   template: options.template || answers.template,
   git: options.git || answers.git,
 };
}
*/

       async function cli(args) {
 let options = parseArgumentsIntoOptions(args);
_47b‍.g.console.log(options);

}